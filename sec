#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <sys/mman.h>
#include <fcntl.h>
#include <string.h>
#include <ctype.h>

#define SHM_SIZE 1024

int main() {
    int fd[2]; // File descriptors for pipe
    pid_t pid;
    char input[SHM_SIZE];

    // Create pipe
    if (pipe(fd) == -1) {
        perror("pipe");
        exit(EXIT_FAILURE);
    }

    // Fork process
    pid = fork();

    if (pid < 0) {
        perror("fork");
        exit(EXIT_FAILURE);
    }

    if (pid > 0) { // Parent process
        close(fd[0]); // Close read end of pipe

        // Get user input
        printf("Enter a string: ");
        fgets(input, sizeof(input), stdin);

        // Write input to pipe
        write(fd[1], input, strlen(input) + 1);
        close(fd[1]); // Close write end of pipe

        wait(NULL); // Wait for child process to finish

        // Open shared memory
        int shm_fd = shm_open("/shared_memory", O_RDONLY, 0666);
        if (shm_fd == -1) {
            perror("shm_open");
            exit(EXIT_FAILURE);
        }

        // Map shared memory
        char *data = mmap(NULL, SHM_SIZE, PROT_READ, MAP_SHARED, shm_fd, 0);
        if (data == MAP_FAILED) {
            perror("mmap");
            exit(EXIT_FAILURE);
        }

        // Print data from shared memory
        printf("Received data: %s\n", data);

        // Clean up
        munmap(data, SHM_SIZE);
        close(shm_fd);
        shm_unlink("/shared_memory");
    } else { // Child process
        close(fd[1]); // Close write end of pipe

        // Read from pipe
        char received_data[SHM_SIZE];
        read(fd[0], received_data, sizeof(received_data));
        close(fd[0]); // Close read end of pipe

        // Convert received data to lowercase
        for (int i = 0; received_data[i]; i++) {
            received_data[i] = tolower(received_data[i]);
        }

        // Create and map shared memory
        int shm_fd = shm_open("/shared_memory", O_CREAT | O_RDWR, 0666);
        if (shm_fd == -1) {
            perror("shm_open");
            exit(EXIT_FAILURE);
        }
        ftruncate(shm_fd, SHM_SIZE);
        char *data = mmap(NULL, SHM_SIZE, PROT_READ | PROT_WRITE, MAP_SHARED, shm_fd, 0);
        if (data == MAP_FAILED) {
            perror("mmap");
            exit(EXIT_FAILURE);
        }

        // Write lowercase data to shared memory
        strcpy(data, received_data);

        // Clean up
        munmap(data, SHM_SIZE);
        close(shm_fd);
        exit(EXIT_SUCCESS);
    }

    return 0;
}
#!/bin/bash

file="cities.txt"

# Function to add a new record
add_record() {
    echo "Enter city name:"
    read city
    echo "Enter 2020 population:"
    read pop_2020
    echo "Enter 2015 population:"
    read pop_2015
    echo "Enter 2010 population:"
    read pop_2010
    echo "$city, $pop_2020, $pop_2015, $pop_2010" >> "$file"
    echo "Record added successfully"
}

# Function to delete a record
delete_record() {
    echo "Enter city name to delete:"
    read city
    sed -i "/^$city/d" "$file"
    echo "Record deleted successfully"
}

# Function to modify a record
modify_record() {
    echo "Enter city name to modify:"
    read city
    echo "Enter new 2020 population:"
    read pop_2020
    echo "Enter new 2015 population:"
    read pop_2015
    echo "Enter new 2010 population:"
    read pop_2010
    sed -i "/^$city/c\\$city, $pop_2020, $pop_2015, $pop_2010" "$file"
    echo "Record modified successfully"
}

# Function to sort records based on 2020 population
sort_by_population() {
    sort -t',' -k2 -nr "$file"
}

# Function to find cities with largest percentage decrease in population between 2005 and 2015
largest_decrease() {
    awk -F', ' '{ decrease = ($3 - $4) / $4 * 100; print $1, decrease }' "$file" | sort -k2 -nr | head -n 1
}

# Function to display number of Indians lived outside cities and towns in 2015
outside_cities() {
    awk -F', ' '{ total += ($3 - $2) } END { print total }' "$file"
}

# Function to display ten largest cities
ten_largest_cities() {
    sort -t',' -k2 -nr "$file" | head -n 10
}

# Function to display details of cities matching a pattern
city_pattern() {
    echo "Enter city name pattern:"
    read pattern
    grep "^$pattern" "$file"
}

# Main menu
while true; do
    echo "Menu:"
    echo "1. Add a new record"
    echo "2. Delete a record"
    echo "3. Modify a record"
    echo "4. Sort records by 2020 population"
    echo "5. Find cities with largest percentage decrease in population between 2005 and 2015"
    echo "6. Number of Indians lived outside cities and towns in 2015"
    echo "7. Ten largest cities"
    echo "8. Display details of cities matching a pattern"
    echo "9. Exit"
    read choice

    case $choice in
        1) add_record ;;
        2) delete_record ;;
        3) modify_record ;;
        4) sort_by_population ;;
        5) largest_decrease ;;
        6) outside_cities ;;
        7) ten_largest_cities ;;
        8) city_pattern ;;
        9) exit ;;
        *) echo "Invalid choice";;
    esac
done
#!/bin/bash

file="cities.txt"

# Function to add a new record
add_record() {
    echo "Enter city name:"
    read city
    echo "Enter 2020 population:"
    read pop_2020
    echo "Enter 2015 population:"
    read pop_2015
    echo "Enter 2010 population:"
    read pop_2010
    echo "$city, $pop_2020, $pop_2015, $pop_2010" >> "$file"
    echo "Record added successfully"
}

# Function to delete a record
delete_record() {
    echo "Enter city name to delete:"
    read city
    sed -i "/^$city/d" "$file"
    echo "Record deleted successfully"
}

# Function to modify a record
modify_record() {
    echo "Enter city name to modify:"
    read city
    echo "Enter new 2020 population:"
    read pop_2020
    echo "Enter new 2015 population:"
    read pop_2015
    echo "Enter new 2010 population:"
    read pop_2010
    sed -i "/^$city/c\\$city, $pop_2020, $pop_2015, $pop_2010" "$file"
    echo "Record modified successfully"
}

# Function to sort records based on 2020 population
sort_by_population() {
    sort -t',' -k2 -nr "$file"
}

# Function to find cities with largest percentage decrease in population between 2005 and 2015
largest_decrease() {
    awk -F', ' '{ decrease = ($3 - $4) / $4 * 100; print $1, decrease }' "$file" | sort -k2 -nr | head -n 1
}

# Function to display number of Indians lived outside cities and towns in 2015
outside_cities() {
    awk -F', ' '{ total += ($3 - $2) } END { print total }' "$file"
}

# Function to display ten largest cities
ten_largest_cities() {
    sort -t',' -k2 -nr "$file" | head -n 10
}

# Function to display details of cities matching a pattern
city_pattern() {
    echo "Enter city name pattern:"
    read pattern
    grep "^$pattern" "$file"
}

# Main menu
while true; do
    echo "Menu:"
    echo "1. Add a new record"
    echo "2. Delete a record"
    echo "3. Modify a record"
    echo "4. Sort records by 2020 population"
    echo "5. Find cities with largest percentage decrease in population between 2005 and 2015"
    echo "6. Number of Indians lived outside cities and towns in 2015"
    echo "7. Ten largest cities"
    echo "8. Display details of cities matching a pattern"
    echo "9. Exit"
    read choice

    case $choice in
        1) add_record ;;
        2) delete_record ;;
        3) modify_record ;;
        4) sort_by_population ;;
        5) largest_decrease ;;
        6) outside_cities ;;
        7) ten_largest_cities ;;
        8) city_pattern ;;
        9) exit ;;
        *) echo "Invalid choice";;
    esac
done
